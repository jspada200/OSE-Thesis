OpenShadingLanguage 1.00
# Compiled by oslc 1.7.4.pixar38bde12
# options: -v -o /root/Desktop/OSE_Reorganized/OSE/Custom/osl/hexpattern.oso
shader hexagons
param	color	Diffuse_Color1	0.2 0.80000001 0.2		%read{0,0} %write{2147483647,-1}
param	color	Diffuse_Color2	0.80000001 0.2 0.2		%read{1,1} %write{2147483647,-1}
param	color	Diffuse_Color3	0.2 0.2 0.80000001		%read{2,2} %write{2147483647,-1}
param	float	Width	0.050000001		%read{208,208} %write{2147483647,-1}
param	float	ss	0		%read{3,3} %write{2147483647,-1}
param	float	tt	0		%read{3,3} %write{2147483647,-1}
oparam	color	Color	0 0 0		%read{2147483647,-1} %write{40,40}
oparam	int	Index	1		%read{39,39} %write{38,38}
oparam	float	Center	0		%read{2147483647,-1} %write{204,204}
oparam	float	Edge	0		%read{208,208} %write{207,207}
oparam	int	InEdge	0		%read{2147483647,-1} %write{208,208}
local	color[3]	colors	%read{40,40} %write{0,2}
local	vector	Coordinates	%read{4,70} %write{3,3}
local	float	syc	%read{8,35} %write{6,6}
local	float	sxc	%read{18,30} %write{9,9}
local	int[18]	ind	%read{38,38} %write{10,10}
local	int	iy	%read{23,23} %write{16,16}
local	int	ix	%read{24,38} %write{22,37}
local	float	sx	%read{55,57} %write{46,57}
local	float	sy	%read{59,62} %write{54,62}
local	float	x	%read{168,182} %write{69,69}
local	float	y	%read{168,182} %write{77,77}
local	vector[18]	hc	%read{168,182} %write{82,165}
local	float[18]	d	%read{185,206} %write{168,203}
local	float	t	%read{185,203} %write{185,203}
local	int	___305_i	%read{168,182} %write{167,182}
local	float	___306_dx	%read{168,182} %write{168,182}
local	float	___306_dy	%read{168,182} %write{168,182}
local	int	___307_j	%read{185,203} %write{184,203}
local	int	___309_i	%read{185,203} %write{185,203}
const	int	$const1	0		%read{0,206} %write{2147483647,-1}
const	int	$const2	1		%read{1,205} %write{2147483647,-1}
const	int	$const3	2		%read{2,87} %write{2147483647,-1}
const	float	$const4	0		%read{3,164} %write{2147483647,-1}
temp	float	$tmp1	%read{6,6} %write{4,4}
const	float	$const5	0.86602539		%read{5,161} %write{2147483647,-1}
temp	float	$tmp2	%read{6,6} %write{5,5}
const	float	$const6	1		%read{5,164} %write{2147483647,-1}
temp	float	$tmp3	%read{9,9} %write{7,7}
const	float	$const7	0.5		%read{8,141} %write{2147483647,-1}
temp	float	$tmp4	%read{9,9} %write{8,8}
const	int[18]	$const8	1 1 3 3 3 1 2 2 2 3 3 3 1 2 2 2 1 1 		%read{10,10} %write{2147483647,-1}
temp	float	$tmp5	%read{16,16} %write{15,15}
const	float	$const9	3		%read{12,163} %write{2147483647,-1}
const	string	$const10	"mod"		%read{11,73} %write{2147483647,-1}
temp	float	$tmp6	%read{14,14} %write{13,13}
temp	float	$tmp7	%read{13,13} %write{12,12}
temp	float	$tmp8	%read{15,15} %write{14,14}
temp	float	$tmp9	%read{22,22} %write{21,21}
temp	float	$tmp10	%read{20,20} %write{19,19}
temp	float	$tmp11	%read{19,19} %write{18,18}
temp	float	$tmp12	%read{21,21} %write{20,20}
const	int	$const11	6		%read{23,108} %write{2147483647,-1}
temp	int	$tmp13	%read{25,25} %write{23,23}
temp	int	$tmp14	%read{25,25} %write{24,24}
temp	int	$tmp15	%read{37,37} %write{25,25}
temp	float	$tmp16	%read{36,36} %write{30,30}
temp	float	$tmp17	%read{29,29} %write{28,28}
temp	float	$tmp18	%read{28,28} %write{27,27}
temp	float	$tmp19	%read{30,30} %write{29,29}
temp	float	$tmp20	%read{36,36} %write{35,35}
temp	float	$tmp21	%read{34,34} %write{33,33}
temp	float	$tmp22	%read{33,33} %write{32,32}
temp	float	$tmp23	%read{35,35} %write{34,34}
temp	int	$tmp24	%read{37,37} %write{36,36}
temp	int	$tmp25	%read{40,40} %write{39,39}
temp	float	$tmp26	%read{43,46} %write{41,41}
const	int	$const12	3		%read{92,92} %write{2147483647,-1}
temp	float	$tmp27	%read{45,45} %write{44,44}
temp	float	$tmp28	%read{44,44} %write{43,43}
temp	float	$tmp29	%read{46,46} %write{45,45}
temp	float	$tmp30	%read{48,48} %write{47,47}
const	float	$const13	0.75		%read{48,48} %write{2147483647,-1}
temp	float	$tmp31	%read{51,54} %write{48,48}
const	int	$const14	4		%read{95,95} %write{2147483647,-1}
temp	float	$tmp32	%read{51,53} %write{49,49}
const	float	$const15	4		%read{49,162} %write{2147483647,-1}
temp	float	$tmp33	%read{53,53} %write{52,52}
temp	float	$tmp34	%read{52,52} %write{51,51}
temp	float	$tmp35	%read{54,54} %write{53,53}
const	float	$const16	1.5		%read{55,55} %write{2147483647,-1}
temp	int	$tmp36	%read{56,56} %write{55,55}
temp	float	$tmp37	%read{59,59} %write{58,58}
const	float	$const17	2		%read{58,161} %write{2147483647,-1}
temp	int	$tmp38	%read{60,60} %write{59,59}
temp	float	$tmp39	%read{62,62} %write{61,61}
temp	float	$tmp40	%read{64,64} %write{63,63}
temp	float	$tmp41	%read{66,69} %write{64,64}
temp	float	$tmp42	%read{68,68} %write{67,67}
temp	float	$tmp43	%read{67,67} %write{66,66}
temp	float	$tmp44	%read{69,69} %write{68,68}
temp	float	$tmp45	%read{71,71} %write{70,70}
temp	float	$tmp46	%read{74,77} %write{71,71}
temp	float	$tmp47	%read{74,76} %write{72,72}
temp	float	$tmp48	%read{76,76} %write{75,75}
temp	float	$tmp49	%read{75,75} %write{74,74}
temp	float	$tmp50	%read{77,77} %write{76,76}
temp	vector	$tmp51	%read{82,82} %write{81,81}
temp	float	$tmp52	%read{79,79} %write{78,78}
temp	float	$tmp53	%read{80,80} %write{79,79}
temp	float	$tmp54	%read{81,81} %write{80,80}
const	vector	$const18	0 0 0		%read{83,83} %write{2147483647,-1}
temp	vector	$tmp56	%read{87,87} %write{86,86}
temp	float	$tmp57	%read{85,85} %write{84,84}
temp	float	$tmp58	%read{86,86} %write{85,85}
temp	vector	$tmp59	%read{92,92} %write{91,91}
temp	float	$tmp60	%read{89,89} %write{88,88}
temp	float	$tmp61	%read{90,90} %write{89,89}
temp	float	$tmp62	%read{91,91} %write{90,90}
temp	vector	$tmp63	%read{95,95} %write{94,94}
temp	float	$tmp64	%read{94,94} %write{93,93}
temp	vector	$tmp65	%read{100,100} %write{99,99}
temp	float	$tmp66	%read{97,97} %write{96,96}
temp	float	$tmp67	%read{98,98} %write{97,97}
temp	float	$tmp68	%read{99,99} %write{98,98}
const	int	$const19	5		%read{100,100} %write{2147483647,-1}
temp	vector	$tmp69	%read{108,108} %write{107,107}
temp	float	$tmp70	%read{102,102} %write{101,101}
temp	float	$tmp71	%read{103,103} %write{102,102}
temp	float	$tmp72	%read{106,106} %write{103,103}
temp	float	$tmp73	%read{105,105} %write{104,104}
temp	float	$tmp74	%read{106,106} %write{105,105}
const	float	$const20	6		%read{105,139} %write{2147483647,-1}
temp	float	$tmp75	%read{107,107} %write{106,106}
temp	vector	$tmp76	%read{113,113} %write{112,112}
temp	float	$tmp77	%read{110,110} %write{109,109}
temp	float	$tmp78	%read{111,111} %write{110,110}
temp	float	$tmp79	%read{112,112} %write{111,111}
const	int	$const21	7		%read{113,113} %write{2147483647,-1}
temp	vector	$tmp80	%read{120,120} %write{119,119}
temp	float	$tmp81	%read{115,115} %write{114,114}
temp	float	$tmp82	%read{118,118} %write{115,115}
temp	float	$tmp83	%read{117,117} %write{116,116}
temp	float	$tmp84	%read{118,118} %write{117,117}
temp	float	$tmp85	%read{119,119} %write{118,118}
const	int	$const22	8		%read{120,120} %write{2147483647,-1}
temp	vector	$tmp86	%read{128,128} %write{127,127}
temp	float	$tmp87	%read{122,122} %write{121,121}
temp	float	$tmp88	%read{123,123} %write{122,122}
temp	float	$tmp89	%read{126,126} %write{123,123}
temp	float	$tmp90	%read{125,125} %write{124,124}
temp	float	$tmp91	%read{126,126} %write{125,125}
temp	float	$tmp92	%read{127,127} %write{126,126}
const	int	$const23	9		%read{128,128} %write{2147483647,-1}
temp	vector	$tmp93	%read{134,134} %write{133,133}
temp	float	$tmp94	%read{132,132} %write{129,129}
temp	float	$tmp95	%read{131,131} %write{130,130}
temp	float	$tmp96	%read{132,132} %write{131,131}
temp	float	$tmp97	%read{133,133} %write{132,132}
const	int	$const24	10		%read{134,134} %write{2147483647,-1}
temp	vector	$tmp98	%read{142,142} %write{141,141}
temp	float	$tmp99	%read{136,136} %write{135,135}
temp	float	$tmp100	%read{137,137} %write{136,136}
temp	float	$tmp101	%read{140,140} %write{137,137}
temp	float	$tmp102	%read{139,139} %write{138,138}
temp	float	$tmp103	%read{140,140} %write{139,139}
temp	float	$tmp104	%read{141,141} %write{140,140}
const	int	$const25	11		%read{142,142} %write{2147483647,-1}
temp	vector	$tmp105	%read{147,147} %write{146,146}
temp	float	$tmp106	%read{144,144} %write{143,143}
temp	float	$tmp107	%read{145,145} %write{144,144}
temp	float	$tmp108	%read{146,146} %write{145,145}
const	int	$const26	12		%read{147,147} %write{2147483647,-1}
const	vector	$const27	1 0 0		%read{148,148} %write{2147483647,-1}
const	int	$const28	13		%read{148,148} %write{2147483647,-1}
temp	vector	$tmp110	%read{152,152} %write{151,151}
temp	float	$tmp111	%read{150,150} %write{149,149}
temp	float	$tmp112	%read{151,151} %write{150,150}
const	int	$const29	14		%read{152,152} %write{2147483647,-1}
temp	vector	$tmp113	%read{157,157} %write{156,156}
temp	float	$tmp114	%read{154,154} %write{153,153}
temp	float	$tmp115	%read{155,155} %write{154,154}
temp	float	$tmp116	%read{156,156} %write{155,155}
const	int	$const30	15		%read{157,157} %write{2147483647,-1}
temp	vector	$tmp117	%read{160,160} %write{159,159}
temp	float	$tmp118	%read{159,159} %write{158,158}
const	int	$const31	16		%read{160,160} %write{2147483647,-1}
temp	vector	$tmp119	%read{165,165} %write{164,164}
temp	float	$tmp120	%read{162,162} %write{161,161}
temp	float	$tmp121	%read{163,163} %write{162,162}
temp	float	$tmp122	%read{164,164} %write{163,163}
const	int	$const32	17		%read{165,165} %write{2147483647,-1}
const	int	$const33	18		%read{168,184} %write{2147483647,-1}
temp	int	$tmp123	%read{166,182} %write{167,182}
temp	float	$tmp124	%read{168,182} %write{168,182}
temp	vector	$tmp125	%read{168,182} %write{168,182}
temp	float	$tmp126	%read{168,182} %write{168,182}
temp	vector	$tmp127	%read{168,182} %write{168,182}
temp	float	$tmp128	%read{168,182} %write{168,182}
const	string	$const34	"hypot"		%read{175,175} %write{2147483647,-1}
temp	float	$tmp129	%read{168,182} %write{168,182}
temp	float	$tmp130	%read{168,182} %write{168,182}
temp	float	$tmp131	%read{168,182} %write{168,182}
temp	int	$tmp132	%read{2147483647,-1} %write{168,182}
temp	int	$tmp133	%read{183,203} %write{184,203}
temp	int	$tmp134	%read{185,203} %write{185,203}
temp	float	$tmp135	%read{185,203} %write{185,203}
temp	int	$tmp136	%read{185,203} %write{185,203}
temp	float	$tmp137	%read{185,203} %write{185,203}
temp	int	$tmp138	%read{185,203} %write{185,203}
temp	int	$tmp139	%read{185,203} %write{185,203}
temp	float	$tmp140	%read{185,203} %write{185,203}
temp	int	$tmp141	%read{185,203} %write{185,203}
temp	int	$tmp142	%read{2147483647,-1} %write{185,203}
temp	int	$tmp143	%read{2147483647,-1} %write{185,203}
temp	float	$tmp144	%read{207,207} %write{205,205}
temp	float	$tmp145	%read{207,207} %write{206,206}
code ___main___
# Custom/osl/src/hexpattern.osl:26
#  
	aassign		colors $const1 Diffuse_Color1 	%filename{"Custom/osl/src/hexpattern.osl"} %line{26} %argrw{"wrr"}
	aassign		colors $const2 Diffuse_Color2 	%argrw{"wrr"}
	aassign		colors $const3 Diffuse_Color3 	%argrw{"wrr"}
# Custom/osl/src/hexpattern.osl:28
#     // we warp the grid so that two adjacent equilateral triangles
	vector		Coordinates ss tt $const4 	%line{28} %argrw{"wrrr"}
# Custom/osl/src/hexpattern.osl:31
#     float sxc = Coordinates[0] + 0.5 * syc;
	compref		$tmp1 Coordinates $const2 	%line{31} %argrw{"wrr"}
	div		$tmp2 $const6 $const5 	%argrw{"wrr"}
	mul		syc $tmp1 $tmp2 	%argrw{"wrr"}
# Custom/osl/src/hexpattern.osl:32
#  
	compref		$tmp3 Coordinates $const1 	%line{32} %argrw{"wrr"}
	mul		$tmp4 $const7 syc 	%argrw{"wrr"}
	add		sxc $tmp3 $tmp4 	%argrw{"wrr"}
# Custom/osl/src/hexpattern.osl:34
#  
	assign		ind $const8 	%line{34} %argrw{"wr"}
# Custom/osl/src/hexpattern.osl:36
#     int ix = int(mod(sxc,3.0));
	functioncall	$const10 16 	%line{36} %argrw{"r"}
# /opt/pixar/RenderManProServer-21.2/lib/osl/include/stdosl.h:135
# PERCOMP2F (pow)
	div		$tmp7 syc $const9 	%filename{"/opt/pixar/RenderManProServer-21.2/lib/osl/include/stdosl.h"} %line{135} %argrw{"wrr"}
	floor		$tmp6 $tmp7 	%argrw{"wr"}
	mul		$tmp8 $const9 $tmp6 	%argrw{"wrr"}
	sub		$tmp5 syc $tmp8 	%argrw{"wrr"}
# Custom/osl/src/hexpattern.osl:36
#     int ix = int(mod(sxc,3.0));
	assign		iy $tmp5 	%filename{"Custom/osl/src/hexpattern.osl"} %line{36} %argrw{"wr"}
# Custom/osl/src/hexpattern.osl:37
#     ix = iy * 6 + ix * 2 + ( mod(sxc,1.0) > mod(syc,1.0) );    
	functioncall	$const10 22 	%line{37} %argrw{"r"}
# /opt/pixar/RenderManProServer-21.2/lib/osl/include/stdosl.h:135
# PERCOMP1 (tanh)
	div		$tmp11 sxc $const9 	%filename{"/opt/pixar/RenderManProServer-21.2/lib/osl/include/stdosl.h"} %line{135} %argrw{"wrr"}
	floor		$tmp10 $tmp11 	%argrw{"wr"}
	mul		$tmp12 $const9 $tmp10 	%argrw{"wrr"}
	sub		$tmp9 sxc $tmp12 	%argrw{"wrr"}
# Custom/osl/src/hexpattern.osl:37
#     ix = iy * 6 + ix * 2 + ( mod(sxc,1.0) > mod(syc,1.0) );    
	assign		ix $tmp9 	%filename{"Custom/osl/src/hexpattern.osl"} %line{37} %argrw{"wr"}
# Custom/osl/src/hexpattern.osl:38
#     Index = ind[ix];
	mul		$tmp13 iy $const11 	%line{38} %argrw{"wrr"}
	mul		$tmp14 ix $const3 	%argrw{"wrr"}
	add		$tmp15 $tmp13 $tmp14 	%argrw{"wrr"}
	functioncall	$const10 31 	%argrw{"r"}
# /opt/pixar/RenderManProServer-21.2/lib/osl/include/stdosl.h:135
# PERCOMP1 (sinh)
	div		$tmp18 sxc $const6 	%filename{"/opt/pixar/RenderManProServer-21.2/lib/osl/include/stdosl.h"} %line{135} %argrw{"wrr"}
	floor		$tmp17 $tmp18 	%argrw{"wr"}
	mul		$tmp19 $const6 $tmp17 	%argrw{"wrr"}
	sub		$tmp16 sxc $tmp19 	%argrw{"wrr"}
# Custom/osl/src/hexpattern.osl:38
#     Index = ind[ix];
	functioncall	$const10 36 	%filename{"Custom/osl/src/hexpattern.osl"} %line{38} %argrw{"r"}
# /opt/pixar/RenderManProServer-21.2/lib/osl/include/stdosl.h:135
# PERCOMP1 (sinh)
	div		$tmp22 syc $const6 	%filename{"/opt/pixar/RenderManProServer-21.2/lib/osl/include/stdosl.h"} %line{135} %argrw{"wrr"}
	floor		$tmp21 $tmp22 	%argrw{"wr"}
	mul		$tmp23 $const6 $tmp21 	%argrw{"wrr"}
	sub		$tmp20 syc $tmp23 	%argrw{"wrr"}
# Custom/osl/src/hexpattern.osl:38
#     Index = ind[ix];
	gt		$tmp24 $tmp16 $tmp20 	%filename{"Custom/osl/src/hexpattern.osl"} %line{38} %argrw{"wrr"}
	add		ix $tmp15 $tmp24 	%argrw{"wrr"}
# Custom/osl/src/hexpattern.osl:39
#     Color = colors[Index-1];    
	aref		Index ind ix 	%line{39} %argrw{"wrr"}
# Custom/osl/src/hexpattern.osl:40
#  
	sub		$tmp25 Index $const2 	%line{40} %argrw{"wrr"}
	aref		Color colors $tmp25 	%argrw{"wrr"}
# Custom/osl/src/hexpattern.osl:44
#     float sy = mod(Coordinates[1]+0.75,A4); 
	compref		$tmp26 Coordinates $const1 	%line{44} %argrw{"wrr"}
	functioncall	$const10 47 	%argrw{"r"}
# /opt/pixar/RenderManProServer-21.2/lib/osl/include/stdosl.h:135
# PERCOMP1 (tan)
	div		$tmp28 $tmp26 $const9 	%filename{"/opt/pixar/RenderManProServer-21.2/lib/osl/include/stdosl.h"} %line{135} %argrw{"wrr"}
	floor		$tmp27 $tmp28 	%argrw{"wr"}
	mul		$tmp29 $const9 $tmp27 	%argrw{"wrr"}
	sub		sx $tmp26 $tmp29 	%argrw{"wrr"}
# Custom/osl/src/hexpattern.osl:45
# 
	compref		$tmp30 Coordinates $const2 	%filename{"Custom/osl/src/hexpattern.osl"} %line{45} %argrw{"wrr"}
	add		$tmp31 $tmp30 $const13 	%argrw{"wrr"}
	mul		$tmp32 $const15 $const5 	%argrw{"wrr"}
	functioncall	$const10 55 	%argrw{"r"}
# /opt/pixar/RenderManProServer-21.2/lib/osl/include/stdosl.h:135
# PERCOMP1 (sin)
	div		$tmp34 $tmp31 $tmp32 	%filename{"/opt/pixar/RenderManProServer-21.2/lib/osl/include/stdosl.h"} %line{135} %argrw{"wrr"}
	floor		$tmp33 $tmp34 	%argrw{"wr"}
	mul		$tmp35 $tmp32 $tmp33 	%argrw{"wrr"}
	sub		sy $tmp31 $tmp35 	%argrw{"wrr"}
# Custom/osl/src/hexpattern.osl:48
#     if ( sy > A2 ) sy = A4 - sy;
	gt		$tmp36 sx $const16 	%filename{"Custom/osl/src/hexpattern.osl"} %line{48} %argrw{"wrr"}
	if		$tmp36 58 58 	%argrw{"r"}
	sub		sx $const9 sx 	%argrw{"wrr"}
# Custom/osl/src/hexpattern.osl:49
#     
	mul		$tmp37 $const17 $const5 	%line{49} %argrw{"wrr"}
	gt		$tmp38 sy $tmp37 	%argrw{"wrr"}
	if		$tmp38 63 63 	%argrw{"r"}
	mul		$tmp39 $const15 $const5 	%argrw{"wrr"}
	sub		sy $tmp39 sy 	%argrw{"wrr"}
# Custom/osl/src/hexpattern.osl:53
#     float y = mod(Coordinates[1]/3,A2);
	compref		$tmp40 Coordinates $const1 	%line{53} %argrw{"wrr"}
	div		$tmp41 $tmp40 $const9 	%argrw{"wrr"}
	functioncall	$const10 70 	%argrw{"r"}
# /opt/pixar/RenderManProServer-21.2/lib/osl/include/stdosl.h:135
# color  degrees (color x)  { return x*(180.0/M_PI); }
	div		$tmp43 $tmp41 $const6 	%filename{"/opt/pixar/RenderManProServer-21.2/lib/osl/include/stdosl.h"} %line{135} %argrw{"wrr"}
	floor		$tmp42 $tmp43 	%argrw{"wr"}
	mul		$tmp44 $const6 $tmp42 	%argrw{"wrr"}
	sub		x $tmp41 $tmp44 	%argrw{"wrr"}
# Custom/osl/src/hexpattern.osl:54
#    
	compref		$tmp45 Coordinates $const2 	%filename{"Custom/osl/src/hexpattern.osl"} %line{54} %argrw{"wrr"}
	div		$tmp46 $tmp45 $const9 	%argrw{"wrr"}
	mul		$tmp47 $const17 $const5 	%argrw{"wrr"}
	functioncall	$const10 78 	%argrw{"r"}
# /opt/pixar/RenderManProServer-21.2/lib/osl/include/stdosl.h:135
# point  degrees (point x)  { return x*(180.0/M_PI); }
	div		$tmp49 $tmp46 $tmp47 	%filename{"/opt/pixar/RenderManProServer-21.2/lib/osl/include/stdosl.h"} %line{135} %argrw{"wrr"}
	floor		$tmp48 $tmp49 	%argrw{"wr"}
	mul		$tmp50 $tmp47 $tmp48 	%argrw{"wrr"}
	sub		y $tmp46 $tmp50 	%argrw{"wrr"}
# Custom/osl/src/hexpattern.osl:58
#         vector(  0,     0     ,0),
	mul		$tmp52 $const17 $const5 	%filename{"Custom/osl/src/hexpattern.osl"} %line{58} %argrw{"wrr"}
	neg		$tmp53 $tmp52 	%argrw{"wr"}
	div		$tmp54 $tmp53 $const9 	%argrw{"wrr"}
	vector		$tmp51 $const4 $tmp54 $const4 	%argrw{"wrrr"}
# Custom/osl/src/hexpattern.osl:78
#     
	aassign		hc $const1 $tmp51 	%line{78} %argrw{"wrr"}
	aassign		hc $const2 $const18 	%argrw{"wrr"}
# Custom/osl/src/hexpattern.osl:60
#         vector(  0,2*A2/3     ,0),
	mul		$tmp57 $const17 $const5 	%line{60} %argrw{"wrr"}
	div		$tmp58 $tmp57 $const9 	%argrw{"wrr"}
	vector		$tmp56 $const4 $tmp58 $const4 	%argrw{"wrrr"}
# Custom/osl/src/hexpattern.osl:78
#     
	aassign		hc $const3 $tmp56 	%line{78} %argrw{"wrr"}
# Custom/osl/src/hexpattern.osl:61
#         vector(  0,  A2       ,0),
	mul		$tmp60 $const17 $const5 	%line{61} %argrw{"wrr"}
	mul		$tmp61 $const17 $tmp60 	%argrw{"wrr"}
	div		$tmp62 $tmp61 $const9 	%argrw{"wrr"}
	vector		$tmp59 $const4 $tmp62 $const4 	%argrw{"wrrr"}
# Custom/osl/src/hexpattern.osl:78
#     
	aassign		hc $const12 $tmp59 	%line{78} %argrw{"wrr"}
# Custom/osl/src/hexpattern.osl:62
#         vector(  0,4*A2/3     ,0),
	mul		$tmp64 $const17 $const5 	%line{62} %argrw{"wrr"}
	vector		$tmp63 $const4 $tmp64 $const4 	%argrw{"wrrr"}
# Custom/osl/src/hexpattern.osl:78
#     
	aassign		hc $const14 $tmp63 	%line{78} %argrw{"wrr"}
# Custom/osl/src/hexpattern.osl:63
# 
	mul		$tmp66 $const17 $const5 	%line{63} %argrw{"wrr"}
	mul		$tmp67 $const15 $tmp66 	%argrw{"wrr"}
	div		$tmp68 $tmp67 $const9 	%argrw{"wrr"}
	vector		$tmp65 $const4 $tmp68 $const4 	%argrw{"wrrr"}
# Custom/osl/src/hexpattern.osl:78
#     
	aassign		hc $const19 $tmp65 	%line{78} %argrw{"wrr"}
# Custom/osl/src/hexpattern.osl:65
#         vector(0.5,     0+A2/6,0),
	mul		$tmp70 $const17 $const5 	%line{65} %argrw{"wrr"}
	neg		$tmp71 $tmp70 	%argrw{"wr"}
	div		$tmp72 $tmp71 $const9 	%argrw{"wrr"}
	mul		$tmp73 $const17 $const5 	%argrw{"wrr"}
	div		$tmp74 $tmp73 $const20 	%argrw{"wrr"}
	add		$tmp75 $tmp72 $tmp74 	%argrw{"wrr"}
	vector		$tmp69 $const7 $tmp75 $const4 	%argrw{"wrrr"}
# Custom/osl/src/hexpattern.osl:78
#     
	aassign		hc $const11 $tmp69 	%line{78} %argrw{"wrr"}
# Custom/osl/src/hexpattern.osl:66
#         vector(0.5,  A2/3+A2/6,0),
	mul		$tmp77 $const17 $const5 	%line{66} %argrw{"wrr"}
	div		$tmp78 $tmp77 $const20 	%argrw{"wrr"}
	add		$tmp79 $const4 $tmp78 	%argrw{"wrr"}
	vector		$tmp76 $const7 $tmp79 $const4 	%argrw{"wrrr"}
# Custom/osl/src/hexpattern.osl:78
#     
	aassign		hc $const21 $tmp76 	%line{78} %argrw{"wrr"}
# Custom/osl/src/hexpattern.osl:67
#         vector(0.5,2*A2/3+A2/6,0),
	mul		$tmp81 $const17 $const5 	%line{67} %argrw{"wrr"}
	div		$tmp82 $tmp81 $const9 	%argrw{"wrr"}
	mul		$tmp83 $const17 $const5 	%argrw{"wrr"}
	div		$tmp84 $tmp83 $const20 	%argrw{"wrr"}
	add		$tmp85 $tmp82 $tmp84 	%argrw{"wrr"}
	vector		$tmp80 $const7 $tmp85 $const4 	%argrw{"wrrr"}
# Custom/osl/src/hexpattern.osl:78
#     
	aassign		hc $const22 $tmp80 	%line{78} %argrw{"wrr"}
# Custom/osl/src/hexpattern.osl:68
#         vector(0.5,  A2  +A2/6,0),
	mul		$tmp87 $const17 $const5 	%line{68} %argrw{"wrr"}
	mul		$tmp88 $const17 $tmp87 	%argrw{"wrr"}
	div		$tmp89 $tmp88 $const9 	%argrw{"wrr"}
	mul		$tmp90 $const17 $const5 	%argrw{"wrr"}
	div		$tmp91 $tmp90 $const20 	%argrw{"wrr"}
	add		$tmp92 $tmp89 $tmp91 	%argrw{"wrr"}
	vector		$tmp86 $const7 $tmp92 $const4 	%argrw{"wrrr"}
# Custom/osl/src/hexpattern.osl:78
#     
	aassign		hc $const23 $tmp86 	%line{78} %argrw{"wrr"}
# Custom/osl/src/hexpattern.osl:69
#         vector(0.5,4*A2/3+A2/6,0),
	mul		$tmp94 $const17 $const5 	%line{69} %argrw{"wrr"}
	mul		$tmp95 $const17 $const5 	%argrw{"wrr"}
	div		$tmp96 $tmp95 $const20 	%argrw{"wrr"}
	add		$tmp97 $tmp94 $tmp96 	%argrw{"wrr"}
	vector		$tmp93 $const7 $tmp97 $const4 	%argrw{"wrrr"}
# Custom/osl/src/hexpattern.osl:78
#     
	aassign		hc $const24 $tmp93 	%line{78} %argrw{"wrr"}
# Custom/osl/src/hexpattern.osl:70
# 
	mul		$tmp99 $const17 $const5 	%line{70} %argrw{"wrr"}
	mul		$tmp100 $const15 $tmp99 	%argrw{"wrr"}
	div		$tmp101 $tmp100 $const9 	%argrw{"wrr"}
	mul		$tmp102 $const17 $const5 	%argrw{"wrr"}
	div		$tmp103 $tmp102 $const20 	%argrw{"wrr"}
	add		$tmp104 $tmp101 $tmp103 	%argrw{"wrr"}
	vector		$tmp98 $const7 $tmp104 $const4 	%argrw{"wrrr"}
# Custom/osl/src/hexpattern.osl:78
#     
	aassign		hc $const25 $tmp98 	%line{78} %argrw{"wrr"}
# Custom/osl/src/hexpattern.osl:72
#         vector(1.0,     0     ,0),
	mul		$tmp106 $const17 $const5 	%line{72} %argrw{"wrr"}
	neg		$tmp107 $tmp106 	%argrw{"wr"}
	div		$tmp108 $tmp107 $const9 	%argrw{"wrr"}
	vector		$tmp105 $const6 $tmp108 $const4 	%argrw{"wrrr"}
# Custom/osl/src/hexpattern.osl:78
#     
	aassign		hc $const26 $tmp105 	%line{78} %argrw{"wrr"}
	aassign		hc $const28 $const27 	%argrw{"wrr"}
# Custom/osl/src/hexpattern.osl:74
#         vector(1.0,2*A2/3     ,0),
	mul		$tmp111 $const17 $const5 	%line{74} %argrw{"wrr"}
	div		$tmp112 $tmp111 $const9 	%argrw{"wrr"}
	vector		$tmp110 $const6 $tmp112 $const4 	%argrw{"wrrr"}
# Custom/osl/src/hexpattern.osl:78
#     
	aassign		hc $const29 $tmp110 	%line{78} %argrw{"wrr"}
# Custom/osl/src/hexpattern.osl:75
#         vector(1.0,  A2       ,0),
	mul		$tmp114 $const17 $const5 	%line{75} %argrw{"wrr"}
	mul		$tmp115 $const17 $tmp114 	%argrw{"wrr"}
	div		$tmp116 $tmp115 $const9 	%argrw{"wrr"}
	vector		$tmp113 $const6 $tmp116 $const4 	%argrw{"wrrr"}
# Custom/osl/src/hexpattern.osl:78
#     
	aassign		hc $const30 $tmp113 	%line{78} %argrw{"wrr"}
# Custom/osl/src/hexpattern.osl:76
#         vector(1.0,4*A2/3     ,0)
	mul		$tmp118 $const17 $const5 	%line{76} %argrw{"wrr"}
	vector		$tmp117 $const6 $tmp118 $const4 	%argrw{"wrrr"}
# Custom/osl/src/hexpattern.osl:78
#     
	aassign		hc $const31 $tmp117 	%line{78} %argrw{"wrr"}
# Custom/osl/src/hexpattern.osl:77
#     };
	mul		$tmp120 $const17 $const5 	%line{77} %argrw{"wrr"}
	mul		$tmp121 $const15 $tmp120 	%argrw{"wrr"}
	div		$tmp122 $tmp121 $const9 	%argrw{"wrr"}
	vector		$tmp119 $const6 $tmp122 $const4 	%argrw{"wrrr"}
# Custom/osl/src/hexpattern.osl:78
#     
	aassign		hc $const32 $tmp119 	%line{78} %argrw{"wrr"}
# Custom/osl/src/hexpattern.osl:82
#         float dx = x - hc[i][0];
	for		$tmp123 168 169 181 183 	%line{82} %argrw{"r"}
	assign		___305_i $const1 	%argrw{"wr"}
	lt		$tmp123 ___305_i $const33 	%argrw{"wrr"}
# Custom/osl/src/hexpattern.osl:83
#         float dy = y - hc[i][1];
	aref		$tmp125 hc ___305_i 	%line{83} %argrw{"wrr"}
	compref		$tmp124 $tmp125 $const1 	%argrw{"wrr"}
	sub		___306_dx x $tmp124 	%argrw{"wrr"}
# Custom/osl/src/hexpattern.osl:84
#         d[i] = hypot(dx, dy); 
	aref		$tmp127 hc ___305_i 	%line{84} %argrw{"wrr"}
	compref		$tmp126 $tmp127 $const2 	%argrw{"wrr"}
	sub		___306_dy y $tmp126 	%argrw{"wrr"}
# Custom/osl/src/hexpattern.osl:85
#     }
	functioncall	$const34 180 	%line{85} %argrw{"r"}
# /opt/pixar/RenderManProServer-21.2/lib/osl/include/stdosl.h:113
# 
	mul		$tmp129 ___306_dx ___306_dx 	%filename{"/opt/pixar/RenderManProServer-21.2/lib/osl/include/stdosl.h"} %line{113} %argrw{"wrr"}
	mul		$tmp130 ___306_dy ___306_dy 	%argrw{"wrr"}
	add		$tmp131 $tmp129 $tmp130 	%argrw{"wrr"}
	sqrt		$tmp128 $tmp131 	%argrw{"wr"}
# Custom/osl/src/hexpattern.osl:85
#     }
	aassign		d ___305_i $tmp128 	%filename{"Custom/osl/src/hexpattern.osl"} %line{85} %argrw{"wrr"}
# Custom/osl/src/hexpattern.osl:82
#         float dx = x - hc[i][0];
	assign		$tmp132 ___305_i 	%line{82} %argrw{"wr"}
	add		___305_i ___305_i $const2 	%argrw{"wrr"}
# Custom/osl/src/hexpattern.osl:88
#         for(int i= 0; i < j; i++){
	for		$tmp133 185 186 202 204 	%line{88} %argrw{"r"}
	sub		___307_j $const33 $const2 	%argrw{"wrr"}
	ge		$tmp133 ___307_j $const1 	%argrw{"wrr"}
# Custom/osl/src/hexpattern.osl:89
#             if(d[i] > d[i+1]){ 
	for		$tmp134 188 189 200 202 	%line{89} %argrw{"r"}
	assign		___309_i $const1 	%argrw{"wr"}
	lt		$tmp134 ___309_i ___307_j 	%argrw{"wrr"}
# Custom/osl/src/hexpattern.osl:90
#                 SWAP(t, d[i], d[i+1]);
	aref		$tmp135 d ___309_i 	%line{90} %argrw{"wrr"}
	add		$tmp136 ___309_i $const2 	%argrw{"wrr"}
	aref		$tmp137 d $tmp136 	%argrw{"wrr"}
	gt		$tmp138 $tmp135 $tmp137 	%argrw{"wrr"}
	if		$tmp138 200 200 	%argrw{"r"}
# Custom/osl/src/hexpattern.osl:91
#             }
	aref		t d ___309_i 	%line{91} %argrw{"wrr"}
	add		$tmp139 ___309_i $const2 	%argrw{"wrr"}
	aref		$tmp140 d $tmp139 	%argrw{"wrr"}
	aassign		d ___309_i $tmp140 	%argrw{"wrr"}
	add		$tmp141 ___309_i $const2 	%argrw{"wrr"}
	aassign		d $tmp141 t 	%argrw{"wrr"}
# Custom/osl/src/hexpattern.osl:89
#             if(d[i] > d[i+1]){ 
	assign		$tmp142 ___309_i 	%line{89} %argrw{"wr"}
	add		___309_i ___309_i $const2 	%argrw{"wrr"}
# Custom/osl/src/hexpattern.osl:88
#         for(int i= 0; i < j; i++){
	assign		$tmp143 ___307_j 	%line{88} %argrw{"wr"}
	sub		___307_j ___307_j $const2 	%argrw{"wrr"}
# Custom/osl/src/hexpattern.osl:96
#     Edge    = d[1] - d[0];
	aref		Center d $const1 	%line{96} %argrw{"wrr"}
# Custom/osl/src/hexpattern.osl:97
#     InEdge  = Edge < Width;
	aref		$tmp144 d $const2 	%line{97} %argrw{"wrr"}
	aref		$tmp145 d $const1 	%argrw{"wrr"}
	sub		Edge $tmp144 $tmp145 	%argrw{"wrr"}
# Custom/osl/src/hexpattern.osl:98
# }
	lt		InEdge Edge Width 	%line{98} %argrw{"wrr"}
	end
